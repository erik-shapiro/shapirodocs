{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Shapiro MIS Documentation Ocean Insights Shapiro Subscription Program: imp/callOceanInsightsTracking.p Check OI data OI API Data Carrier List Ports America Shapiro Subscription URL Shapiro Response URL Hub 360 Shapiro Response URL Regen The WSDL How to regen the WSDL Database Changes Crontab Changes Change the crontab by typing: crontab -e -u demon1 Reset The Demons cd to /usr/bin run stopdemons cd to /data3/demon1 remove STOPDEMON1 run new.start.demon as su Local Documentation Setup Download Git . Install Python (be sure to \"Add Python 3.7 to PATH\"). It should include pip by default. Go into your favorite directory. Right-click in whitespace and click \"Git Bash Here\". A command prompt will come up. Run the following: pip install mkdocs (this will install mkdocs, which you need to compile the documentation into HTML pages) git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-cms/templates/rt_metamorph/shapirodocumentaion cd shapirodocumentaion git checkout master Now make your changes. Once you are done, commit your raw changes to the master branch: git pull (make sure you have the latest version of the repository) git status (make sure your files show up as edited) git add {filename} (stage your files for a commit) git commit (be sure to add a commit message on the next screen, or else your commit will not take) git push (this pushes your raw changes to the master branch) mkdocs gh-deploy (this compiles the documentation site and syncs it to 360) Please remember to do both: push to the master branch and deploy the new site. These are two distinct branches, and updating one will not update the other. Reports Reports","title":"Shapiro MIS Documentation"},{"location":"#shapiro-mis-documentation","text":"","title":"Shapiro MIS Documentation"},{"location":"#ocean-insights","text":"Shapiro Subscription Program: imp/callOceanInsightsTracking.p Check OI data OI API Data Carrier List","title":"Ocean Insights"},{"location":"#ports-america","text":"Shapiro Subscription URL Shapiro Response URL","title":"Ports America"},{"location":"#hub-360","text":"Shapiro Response URL","title":"Hub 360"},{"location":"#regen-the-wsdl","text":"How to regen the WSDL","title":"Regen The WSDL"},{"location":"#database-changes","text":"","title":"Database Changes"},{"location":"#crontab-changes","text":"Change the crontab by typing: crontab -e -u demon1","title":"Crontab Changes"},{"location":"#reset-the-demons","text":"cd to /usr/bin run stopdemons cd to /data3/demon1 remove STOPDEMON1 run new.start.demon as su","title":"Reset The Demons"},{"location":"#local-documentation-setup","text":"Download Git . Install Python (be sure to \"Add Python 3.7 to PATH\"). It should include pip by default. Go into your favorite directory. Right-click in whitespace and click \"Git Bash Here\". A command prompt will come up. Run the following: pip install mkdocs (this will install mkdocs, which you need to compile the documentation into HTML pages) git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-cms/templates/rt_metamorph/shapirodocumentaion cd shapirodocumentaion git checkout master Now make your changes. Once you are done, commit your raw changes to the master branch: git pull (make sure you have the latest version of the repository) git status (make sure your files show up as edited) git add {filename} (stage your files for a commit) git commit (be sure to add a commit message on the next screen, or else your commit will not take) git push (this pushes your raw changes to the master branch) mkdocs gh-deploy (this compiles the documentation site and syncs it to 360) Please remember to do both: push to the master branch and deploy the new site. These are two distinct branches, and updating one will not update the other.","title":"Local Documentation Setup"},{"location":"#reports","text":"Reports","title":"Reports"},{"location":"regenwsdl/","text":"Regen WSDL Make sure that you compile any programs that you want added to the WSDL Login to Shap-exp-360pro for Production or Shap-exp-360dev for Development. Launch WinSCP Move over the .r files, of the programs you complied in Step 1 (See below for the directory names) Launch the proxy generator Hit the folder icon and navigate to C:\\shapiro360 and chose ShapiroProd or ShapiroDev The hit Procedure->Add->Non-Persistent Hit save and then hit to generate the WSDL Next go back to WinSCP and navigate to the below folders Drag ShapiroProd.xpxg from the left panel to the right panel. If you get and error the delete the file on the right side and then drag over the file. Open up a rashi6 session and cd to /home/allegro/bin and run either xpxgdev-build.sh or xpxgprod-build.sh You should receive a message that this run was successful. Next go to http://192.168.66.102:9090 Go to the Web Services Adapter section and select either shap-exp-rashi6.wsadevShapiro360 or shap-exp-rashi6.wsaprodShapiro360 Got t Status Enablement and disable the Web Service Adaptor. Then go back to the previous screen and hit Update. Type /progs/mxp/shap102/objects/ShapiroProd.wsm or /progs/mxp/shap102test/objects/ShapiroDev.wsm and hit submit. Click through the next page and you should receive a message that it was updated. Lastly right click and open Configure Tomcat as administrator Click stop, wait about 10 seconds and then start tomcat.","title":"Regen WSDL"},{"location":"regenwsdl/#regen-wsdl","text":"Make sure that you compile any programs that you want added to the WSDL Login to Shap-exp-360pro for Production or Shap-exp-360dev for Development. Launch WinSCP Move over the .r files, of the programs you complied in Step 1 (See below for the directory names) Launch the proxy generator Hit the folder icon and navigate to C:\\shapiro360 and chose ShapiroProd or ShapiroDev The hit Procedure->Add->Non-Persistent Hit save and then hit to generate the WSDL Next go back to WinSCP and navigate to the below folders Drag ShapiroProd.xpxg from the left panel to the right panel. If you get and error the delete the file on the right side and then drag over the file. Open up a rashi6 session and cd to /home/allegro/bin and run either xpxgdev-build.sh or xpxgprod-build.sh You should receive a message that this run was successful. Next go to http://192.168.66.102:9090 Go to the Web Services Adapter section and select either shap-exp-rashi6.wsadevShapiro360 or shap-exp-rashi6.wsaprodShapiro360 Got t Status Enablement and disable the Web Service Adaptor. Then go back to the previous screen and hit Update. Type /progs/mxp/shap102/objects/ShapiroProd.wsm or /progs/mxp/shap102test/objects/ShapiroDev.wsm and hit submit. Click through the next page and you should receive a message that it was updated. Lastly right click and open Configure Tomcat as administrator Click stop, wait about 10 seconds and then start tomcat.","title":"Regen WSDL"},{"location":"report/","text":"Tables The \u201cname\u201d field is the ID which links all tables. rpt-hdr This is the header; a report will not be acknowledged unless it has an rpt-hdr record. name The program-friendly name for a report. Please don\u2019t use spaces or goofy characters. Try to make it alphanumerics, underscores, and dashes only. It also goes in the filename of the spreadsheet, so don\u2019t put anything uncouth. run-time The time of day that this should run. For example: \u201c7:30AM\u201d, \u201c8PM\u201d. run-day The day(s) that this should run. If you want days of the week, specify them like this: \u201cMonday,Tuesday,Wednesday,Thursday,Friday\u201d If you want days of the month, specify them like this: \u201c1,15\u201d calc-prog The name of an external program to reference. Its behavior is dependent on rpt-hdr.use-remote. use-remote If this is yes, then it will run as an external report. This ignores rpt-qry and rpt-det tables. It will call rpt-hdr.calc-prog like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error. If this is no, then it will run as an internal report. This means looking up rpt-qry and rpt-det tables to generate a report. If rpt-hdr.calc-prog is set, it will be run as a filter. rpt-version A number representing the version of the report. party The party associated with this report. Set this to customer.cust-no or the name of a department (\u201cCompliance\u201d, \u201cGLG\u201d, etc.). rpt-desc The human-readable name for this report. shap360-name If you leave this blank, no one in Shapiro 360 will see it. If you set this, it will be visible in Shapiro 360. The value of rpt-hdr.party must be in web-login.us-stats-cust-no-allowed. shap360-users If this report is visible in Shapiro 360, you can lock it down to certain 360 users. If you add names here, it will only be visible to those users. If you leave this blank, it will be visible to all users. rpt-xls This table defines the email which sends this report. name * Should match rpt-hdr.name. col-name * For use in internal reports. Filter on a certain column name when generating the spreadsheet. cell-value * For use in internal reports. Filter on a certain column value when generating the spreadsheet. from-addr * For the email, the address that should send it. Commonly \u201cshapiroautomation@shapiro.com\u201d. to-addr * The recipient email for this report. You can send to multiple emails if you separate them by commas. rpt-title * The subject line of the email. rpt-body * The body of the email. If you leave this blank, it will send a generic message. send-if-blank * If this is yes, you\u2019ll try to send the report even if you don\u2019t have one to send. rpt-inp If your report needs user input, define those input fields here. When the report is run on a schedule, it will look for fields where rpt-inp.login is \u201cSYSTEM\u201d. For an example of this, see imp/report-fb-all.p:get-date-range. name Should match rpt-hdr.name. login The login of the user. This can be \u201cSYSTEM\u201d (when run on a schedule), an Automation login (when run from Automation), or a Joomla numeric user ID (when run from Shapiro 360). inp-seq Specifies the order that this should be printed. 1 is printed first, then 2, then 3, etc. inp-name The name of the input field. Put something that will look nice when the user sees it. Instead of \u201cstart-date\u201d, put \u201cStart Date\u201d. inp-value The value that the user set for this input field. inp-desc The description of the input field. Put something that will give the user instructions. For example, if inp-name is \u201cStart Date\u201d, inp-desc could be \u201cSet the starting date for this report.\u201d inp-type The datatype of this field. This is important for displaying the report properly in Shapiro 360. Important Note The tables below this are only used for internal reports. \u201cInternal\u201d does not mean \u201cinternal to Shapiro\u201d. It means \u201cthe query is run internally inside of imp/report.p\u201d. If rpt-hdr.use-remote is yes, you can ignore the below tables. rpt-qry This defines the query for finding records to put on the report. Each rpt-qry record defines one phrase in the \u201cwhere\u201d clause. Each rpt-qry record is joined by \u201cand\u201d to create the full where clause. name Should match rpt-hdr.name. table-depth There can be multiple queries in a report. This specifies how many queries deep you are. For instance, say you want to find every bookeq for every shiphead. Shiphead will be table-depth 1. Bookeq will be table-depth 2. depth-seq Ignore this. It should always be 1. You can use it to set up \u201cor\u201d-like behavior if you super seriously need to. table-name The table to query. \u201cshiphead\u201d, \u201cbookeq\u201d, etc. field-name The field to compare against. \u201ccreate-date\u201d, \u201ccontainer-number\u201d, etc. operator The verb to use. \u201c=\u201d, \u201cbegins\u201d, etc. field-value The value to compare against. If field-type is \u201cdate\u201d, you can use an integer. For instance, if you set field-value to \u201c-5\u201d, then it will be calculated as \u201ctoday - 5\u201d. If local-var is yes, then set this to the name of a local variable. For example, \u201cbranch\u201d. field-type The datatype to compare against. This is important for doing date/numeric comparisons. local-var If this is yes, then you will compare against a local variable as defined in the rpt-var table. rpt-var When running multi-table queries, you\u2019ll need some way to link one table to another. For example, to find every bookeq for every shiphead, you\u2019ll need to compare branch, dept, and id. rpt-var stores those as local variables at runtime. name Should match rpt-hdr.name. table-depth The depth to pull this variable from. Should match rpt-qry.table-depth. depth-seq Should match rpt-qry.depth-seq. field-name The field to pull as a local variable. For example, if you\u2019re pulling from shiphead, this might be \u201cbranch\u201d. rpt-det Each rpt-det record defines a column on the report. name Should match rpt-hdr.name. field-seq The order of this column on the report. table-name The name of the table to pull this field from. For example, \u201cshiphead\u201d. field-name The name of the field to pull this data from. For example, \u201cbranch\u201d. col-name The name of the column to display on the spreadsheet. data-type The Progress datatype. excel-type The Excel datatype. This is important for formatting columns. calc-prog If you need to calculate this field, leave field-name blank. Then, set calc-prog to a program name. It will be called like this: run value(rpt-det.calc-prog) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. hidden Use this if you want to hide the value of this column. This is used when you want to pull different rows onto different tabs. rpt-tab If you want more than one tab on your report, create an rpt-tab record. name Should match rpt-hdr.name. col-name The name of the column to generate tabs from. This should match rpt-det.col-name. cell-value If cell-value is blank, you will create one tab for every unique value in a column. If you want to filter to one value, specify it here. Central Program Rashi 6 imp/report.p Parameters Input Report time This determines the output location of the report. If it\u2019s a time (such as \u201c8AM\u201d, \u201c10AM\u201d, or \u201c1stOfMonth\u201d), it will end up in a directory where schedtask will generate the .xls at a given time. If it\u2019s blank, it will put the report in a user-specific directory based on the user login input. An email will be sent to {user login}@shapiro.com with realtime master XLS instructions. If it\u2019s \u201cshapiro360\u201d, it will go to a special directory for Shapiro 360 report downloads. See the documentation on shapiro360/runRpt.p for more information. Report name If this is blank, it will run all reports matching a given time. For example, if \u201c8AM\u201d is your report time, and the report name is blank, it will run all reports scheduled for 8 AM. User login If the report is being run on a schedule, then this should be \u201cSYSTEM\u201d. If it\u2019s run for an internal user, this should be their Automation login. (Hopefully we can just append \u201c@shapiro.com\u201d to get their email address.) If it\u2019s run for Shapiro 360, this will be their user ID in the Joomla MySQL database. In this case, it will be an integer. Body Kicks off the reports based on your input parameters: whether it should be a scheduled job or an individual report, and whether it goes internal or out to Shapiro 360. This sets the output directory and calls wrt-rpt. It also emails the Automation user if necessary. Internal Procedures There are two kinds of reports: internal and remote. Internal reports run a database query through imp/report.p. This largely happens in get-depth. External reports run a database query in an external program. imp/report.p will call this program. External reports are easier. Internal and external wrt-rpt Writes an individual report. If you\u2019re doing a scheduled run for a certain time, you\u2019ll call wrt-rpt once for each report scheduled. Calls prep-output to set up your individual directories and sendmail scripts. If reports run inside of imp/report.p, you\u2019ll call: get-depth to traverse the rpt-qry and rpt-det tables (these tables define the database queries and assign statements which produce reports) finalize-tabs to split data into tabs if necessary If reports don\u2019t run inside of imp/report.p, you\u2019ll call remote-report to run the report. procedure get-full-dir This will generate one directory for each rpt-xls record. There will be one by default. Internal reports get-depth This one\u2019s a doozy. This builds a query using rpt-qry to find records for pulling data onto the report. One rpt-qry record represents one phrase in the query\u2019s \u201cwhere\u201d clause. rpt-det specifies which data you pull onto the report. One rpt-det record represents one column on the report. Some notes on external programs: If rpt-hdr.calc-prog is set, get-depth runs a filter function like so: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input table-name, input table-rowid, input \"filter\", input user-login, output continue ) no-error. Use this if you want to skip certain records, but can\u2019t do so through defining rpt-qry records. (For example, if you need logic involving \u201cor\u201d.) If continue is Y, then it will put this record on the report. Otherwise, it will skip this record. If rpt-det.calc-prog is blank, then it will pull the value out of the database directly. If rpt-det.calc-prog is set, it will run that program to determine the value to put in the cell. It calls rpt-det.calc-prog like so: run value(file-info:full-pathname) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. prep-output Prepare directories for CSV files to go in. Write rpt-list.txt so that the master XLS knows to run this report. Append to send-script.sh so that you mail the report out (if it\u2019s scheduled). procedure open-report Create directories to house .csv and .xls files. procedure finalize-tabs Write the header line in each .csv file you\u2019ve generated. procedure open-tab Not called. procedure output-line Outputs lines in every relevant directory. procedure print-line-by-tabs Outputs lines to every relevant .csv file. print-line-to-file Read the rpt-cell table and put data in a .csv file. External reports remote-report Calls a program to generate .csv files into a directory. Calls the program like so: run value(file-info:full-pathname) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error. Examples of Calls imp/report.p ( input \u201c7:30AM\u201d, input \u201c\u201d, input \u201cSYSTEM\u201d ). In this case, we\u2019re running all of the morning reports. imp/report.p ( input \u201cshapiro360\u201d, input \u201cfb-draft\u201d, input \u201c648\u201d ). A user on 360 is running the Five Below All PO report. The Joomla user ID is 648. imp/report.p ( input \u201crealtime\u201d, input \u201cmr-fb-pom\u201d, input \u201cgregory\u201d ). Automation user \u201cgregory\u201d is running the M+R Five Below POM report. Because the time is \u201crealtime\u201d, the realtime XLS will be emailed to \u201cgregory@shapiro.com\u201d. (It will be S:\\CORP-DAILY\\realtime\\gregory\\realtime-master.xls.) imp/report.p ( input \u201c\u201d, input \u201cfb-onwat-fb\u201d, input \u201cSYSTEM\u201d ). Someone is testing the Five Below On the Water report. They must have typed this into the Progress Editor. This run will end up in CORP-DAILY/rpt/realtime. Automation These are programs in Automation for updating and running reports. I have tried to put advice in the \u201cHelp\u201d box on the right in this program. Or rather, I have put advice in that box, and I have tried to make it good advice. Report Modifier Before starting, you must enter a report name in \u201cReport:\u201d and hit Enter. If you don\u2019t know one, hit F6 to look one up. Or, if you want to create a new report, type the name for it and hit Enter. Please make it program-friendly (alphanumerics, underscores, and dashes only). Use the \u201cRun\u201d button to run the report. It\u2019ll email you a realtime master XLS. Header Header Program If Use Remote? is yes, then Program will be called like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error. If Use Remote? is no, then Program will be used as a filter, like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input table-name, input table-rowid, input \"filter\", input user-login, output continue ) no-error. Description A human-readable description for the program. Party The party for this program. You can leave it blank, set it to a customer code, or set it to a Shapiro department. Version A number representing the version of the program. Use remote? This determines the behavior of the Program field. If you set this to yes, then you can have most of the Progress programming coming out of your own program. Shapiro 360 Name If you want to display this in Shapiro 360, set this. The Party must match the customer code for a user. Shapiro 360 Users If you leave this blank, it\u2019ll display to all users matching the Party. If you set it, this report will only show to the users specified. Input Field Name The name of the field. Make it nice to look at; do \u201cStart Date\u201d, not \u201cstart-date\u201d. Default Value The default value. This will be used if the report is run on a schedule. It will also auto-populate for a user before they have set their own preferred value. Data Type The datatype for this field. It\u2019s important to specify this so you can perform accurate numeric or date comparisons. Description You can use this to give instructions to the user if you need to. Query You will only need this if \u201cUse Remote?\u201d is no. Query Every record here defines a phrase in the \u201cwhere\u201d clause. Depth If you are querying tables within tables, this specifies which query you are talking about. For instance, say you are querying every bookeq for every shiphead. shiphead would be Depth 1. bookeq would be Depth 2. Table The table to query. Field The field to compare against. Operator The verb to use: \u201c=\u201d, \u201cbegins\u201d, etc. Value The value to compare against. If Data Type is \u201cdate\u201d, then you can put an integer here to perform comparisons relative to today. For example, if you enter \u201c-5\u201d, then the comparison will be against \u201ctoday - 5\u201d. Use Local Variable? Usually this is no. But, if you want to compare against the value of a local variable, select yes. If you select yes, then \u201cvalue\u201d must be the name of a local variable (\u201cbranch\u201d, \u201cdept\u201d, etc.). Note that you must define local variables below. Data Type The datatype of the field you\u2019re comparing against. Local Variables Query Depth Which depth to pull this local variable from. If you\u2019re querying every bookeq for every shiphead: shiphead will be Depth 1. bookeq will be Depth 2. Field Name The field to pull into a local variable. In the shiphead/bookeq example: You\u2019ll want to pull \u201cbranch\u201d, \u201cdept\u201d, and \u201cid\u201d from Depth 1. Columns You will only need this if \u201cUse Remote?\u201d is no. Columns Move Up/Move Down Use these to change the order of columns on the report. The columns are printed in order from left to right. Table The table to pull this column from. Field The field name to pull this column from. Program If you need to calculate the value of this field, put in a program name. It will be called like this: run value(rpt-det.calc-prog) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. Column Header The title for the column to print in the spreadsheet. Hidden? Use this to hide a column. You\u2019ll want to do that if you are creating tabs. Progress Type The datatype of the variable in progress. Excel Type The format of the value in the Excel spreadsheet. This is important to set so that integers don\u2019t turn into scientific notation and so that dates don\u2019t get reformatted. Tabs Only bother with this if you want multiple tabs in your report. Column Header Set this to the Column Header from the above form. There will be one tab for each unique value in this column. For example, if you set it on the \u201cPort of Entry\u201d column, then you might have tabs like: \u201cLOS ANGELES, CA\u201d \u201cMEMPHIS, TN\u201d \u201cBALTIMORE, MD\u201d Mail To Email The email to receive this report. From Email The email to send this report. Email Subject The subject line for the email. Email Body The body text for the email. If you leave it blank, we\u2019ll send a generic message. Send if Blank? If there\u2019s no report to send, then you can prevent us from sending anything. Set this to \u201cyes\u201d if you want the mailer to run even if we don\u2019t have a report. Run time The time of day to run. Run day The day of week to run. Run month The month to run. Leave blank if it should run every month. Column Name Use this to filter reports. Probably leave it blank. Cell Value Use this to filter reports. Probably leave it blank. Report Runner Search Type in a report name, party, or description. OK Hit this to select a report from the table. You need to hit \u201cOK\u201d before you can run it. Input This table displays user input fields. The program will set up defaults for you. You can change them using the \u201cInput Value\u201d text input. Input Value Click \u201cUpdate\u201d to change an input value. Click \u201cSave\u201d to save your new input value. Run This kicks off a report. Once it\u2019s done, you will receive an email with the report. Cancel You will need to wait while a report runs. If you cannot wait, you can click \u201cCancel\u201d. If you click \u201cCancel\u201d, your report will not finish. Return Use this to exit the Report Runner. Master XLS There are two different master XLSes. One is run during a scheduled run, and another is sent to users for running in real time. Folder structure: S:\\CORP-DAILY\\rpt{time that the report runs}{report name}{spreadsheet group}{CSV files} For example: S:\\CORP-DAILY\\rpt\\10am\\fb-draft\\rpt\\allpo.csv Each spreadsheet group will have one spreadsheet. Every file in the {CSV files} folder will be put as one tab on the same spreadsheet. Scheduled S:\\CORP-DAILY\\rpt\\master.xls auto_open() Get a list of report names to run out of rpt-list.txt. This goes in a variable called ReportNames. Each report name defines a directory to look in. For each directory, examine all sub-directories. This goes in SubFolder. For each subfolder, examine all CSV files. This goes in CSVNames. Run format_cells() for each entry in CSVNames. Each CSV file is a tab on the report. For each subfolder, save an XLS. Move all CSV files into the archive directory. Delete rpt-list.txt. Quit out of the Excel macro. format_cells() If this is a special tab (marked as \u201cPIE CHART\u201d or \u201cBAR GRAPH\u201d), pass it off to pie_chart() or bar_graph() as is appropriate. If you\u2019re not a special tab, run normally. Set the borders. Examine the header cell of each column. Apply formatting (bold text, gray background). Format the column if any formatting is specified. \u201c (DATE)\u201d \u2013 format as a date \u201c (INTEGER)\u201d \u2013 format as an integer \u201c{header};NumberFormat;{format}\u201d \u2013 format the column with whatever is in {format} Example: \u201cItem Price;NumberFormat;0.0000\u201d will apply number format \u201c0.0000\u201d to the column. The header will only say \u201cItem Price\u201d afterwards. For each cell, replace the text \u201c(NEWLINE)\u201d with an actual newline. Autofit and autofilter all cells. pie_chart() First row format: PIE CHART,{name},{number of rows} \u201cPIE CHART\u201d must be there to tell the macro that it\u2019s a pie chart. {name} is the name of your pie chart. {number of rows} is the number of rows of data you\u2019re sending. Then each subsequent row must have this format: {name},{value} {name} is the name of the pie chart slice. {value} is the value associated with the pie chart slice. bar_graph() First row format: BAR GRAPH,{name},{number of rows},{special},\u201dDATA LABELS\u201d \u201cBAR GRAPH\u201d must be there to tell the macro that it\u2019s a bar graph. {name} is the name of your bar graph. {number of rows} is the number of rows of data that you\u2019re sending. {special} is optional. It lets you format the bar graph. \u201cDOUBLE BAR\u201d \u2013 show columns clustered side by side \u201c100% STACK\u201d \u2013 show columns stacked on top one another to reach 100% If you want data labels, you must put \u201cDATA LABELS\u201d in the fifth spot. This is optional. The second row must have this format: ,{name 1},{name 2} The first spot must be blank. {name 1} is the label of each bar. For example: if the bars are labelled \u201cBrazil\u201d and \u201cTurkey\u201d, then {name 1} should be \u201cCountry\u201d. {name 2} is the value for each bar. For example: if the bars show the percentage of compliance, then {name 2} should be \u201c% compliant\u201d. Then each subsequent row must have this format: {label},{value} {label} is the name of a data point. {value} is the value for a data point. Col_Letter() Find the letter corresponding to a column. HexToLongRGB() Convert a hexadecimal color code to RGB. Realtime S:\\CORP-DAILY\\rpt\\realtime-master.xls This is the same as the scheduled XLS, except it keeps the report open so the user can read it. Shapiro 360 Report Getter shapiro360/getRpt.p This program checks if you\u2019re allowed to access a report. It also passes back any input fields for the report as defined in rpt-inp. This is so that custom-report.php can display input fields for the user to fill out. For instance, say your report has a start date and an end date; this will pass back two input fields, one for each date. Parameters Input web-login.user-login rpt-hdr.name Output Error message Human-readable report name A temp table of user input fields PHP Script custom-report.php Initialization A report name is passed in through $_GET[\u2018rpt\u2019]. This report name is passed into the report getter in order to draw the page. The report getter gives you the title to display on the page. It also gives you the input fields to display. For each row in ttInput, it draws an input field. If it\u2019s an integer, the page draws a number input; if it\u2019s a date, the page draws a date picker; otherwise, the page draws a regular text input. Input Parameters This report reads the \u201crpt\u201d GET variable. This corresponds to a value in rpt-hdr.name. Functions JavaScript window.addEventListener(\u2018load\u2019) Set the page name. If you have any date inputs, initialize the date picker. run_rpt() Pack up the input fields and call the report runner. This kicks off ping_file(). ping_file() Check to see if your report has finished running. If it\u2019s done, download it. If it\u2019s not done, check again in 1 second. This uses setInterval(). The report will be at https://shapiro360.shapiro.com/vdocs/reports/{user_id} {report name} {timestamp}.xlsx. However, ping_file() checks for a .txt file. This file is created once the .xlsx is completely written. This prevents the user from downloading a half-written spreadsheet. For big reports (Five Below All PO Report), this can run for like five minutes. Report Runner shapiro360/runRpt.p Take the user\u2019s input and create rpt-inp records. Then, run the report through imp/report.p. Once that is done, call the Master PY. Parameters Input web-login.user-login Joomla user ID rpt-hdr.name timestamp input temp-table Output Error message Location of the report This isn\u2019t used by the PHP script, since the web service will time out on larger reports. That\u2019s okay, because the Progress program will continue running, even though it will never return to the PHP script. Internal Procedures crt-inp This creates rpt-inp records based on data the user passed in. This scheme allows you to save the user\u2019s input to the database so that it can be read from any program. Master PY shapiro360/openpyxl-2.5.4/report.py This uses the Python library openpyxl. Input Parameters Input folder \u2013 folder to read CSVs from Output \u2013 the filename to save an XLSX into, minus the file extension Body Read every CSV file out of the input folder one by one. Run normal_sheet(), pie_chart(), or bar_graph() as is appropriate. Save the output XLSX. Once that\u2019s done, save a TXT file to communicate that the XLSX is fully written. Functions as_text() Return the value of a cell as a string. normal_sheet() Process a CSV file as a normal sheet. This mirrors format_cells() from the Master XLS. pie_chart() Process a CSV as a pie chart. This mirrors pie_chart() from the Master XLS. bar_graph() Process a CSV as a bar graph. This mirrors bar_graph() from the Master XLS. Scheduled Runs Rashi 6: Generate .csv Files The demon1 crontab runs /usr/bin/run_report_sched.sh runs on the 15th and 45th minute of each hour. That calls /usr/bin/mxp_report.pf. That calls imp/report-sched.p. imp/report-sched.p figures the time and passes it into imp/report.p. For instance, if the time is between 7:10 AM and 7:39 AM, imp/report-sched.p will pass \"8AM\" to imp/report.p. schedtask: Generate .xls Files The Task Scheduler calls C:\\bat\\report.bat on the 15th and 45th minute of each hour. It will determine what time to run. For instance, if the time is between 7:40 AM and 8:09 AM, it will get the time \"8AM\". It will look for a directory according to this time. This will be in the format: \\myshapiro\\dfs\\corp-daily\\rpt{TIME} If the directory exists, and it has a master XLS and rpt-list.txt, then report.bat will run the master XLS. Rashi 6: Mail .xls Files The demon1 crontab runs /usr/bin/mail_report_sched.sh on the 0th and 30th minute of each hour. It will look for a mail script according to the time. The mail script will be in this location: /usr5/dailyreports/rpt/{TIME}/send-script.sh If the mail script is there, mail_report_sched.sh will run it.","title":"Tables"},{"location":"report/#tables","text":"The \u201cname\u201d field is the ID which links all tables.","title":"Tables"},{"location":"report/#rpt-hdr","text":"This is the header; a report will not be acknowledged unless it has an rpt-hdr record. name The program-friendly name for a report. Please don\u2019t use spaces or goofy characters. Try to make it alphanumerics, underscores, and dashes only. It also goes in the filename of the spreadsheet, so don\u2019t put anything uncouth. run-time The time of day that this should run. For example: \u201c7:30AM\u201d, \u201c8PM\u201d. run-day The day(s) that this should run. If you want days of the week, specify them like this: \u201cMonday,Tuesday,Wednesday,Thursday,Friday\u201d If you want days of the month, specify them like this: \u201c1,15\u201d calc-prog The name of an external program to reference. Its behavior is dependent on rpt-hdr.use-remote. use-remote If this is yes, then it will run as an external report. This ignores rpt-qry and rpt-det tables. It will call rpt-hdr.calc-prog like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error. If this is no, then it will run as an internal report. This means looking up rpt-qry and rpt-det tables to generate a report. If rpt-hdr.calc-prog is set, it will be run as a filter. rpt-version A number representing the version of the report. party The party associated with this report. Set this to customer.cust-no or the name of a department (\u201cCompliance\u201d, \u201cGLG\u201d, etc.). rpt-desc The human-readable name for this report. shap360-name If you leave this blank, no one in Shapiro 360 will see it. If you set this, it will be visible in Shapiro 360. The value of rpt-hdr.party must be in web-login.us-stats-cust-no-allowed. shap360-users If this report is visible in Shapiro 360, you can lock it down to certain 360 users. If you add names here, it will only be visible to those users. If you leave this blank, it will be visible to all users.","title":"rpt-hdr"},{"location":"report/#rpt-xls","text":"This table defines the email which sends this report. name * Should match rpt-hdr.name. col-name * For use in internal reports. Filter on a certain column name when generating the spreadsheet. cell-value * For use in internal reports. Filter on a certain column value when generating the spreadsheet. from-addr * For the email, the address that should send it. Commonly \u201cshapiroautomation@shapiro.com\u201d. to-addr * The recipient email for this report. You can send to multiple emails if you separate them by commas. rpt-title * The subject line of the email. rpt-body * The body of the email. If you leave this blank, it will send a generic message. send-if-blank * If this is yes, you\u2019ll try to send the report even if you don\u2019t have one to send.","title":"rpt-xls"},{"location":"report/#rpt-inp","text":"If your report needs user input, define those input fields here. When the report is run on a schedule, it will look for fields where rpt-inp.login is \u201cSYSTEM\u201d. For an example of this, see imp/report-fb-all.p:get-date-range. name Should match rpt-hdr.name. login The login of the user. This can be \u201cSYSTEM\u201d (when run on a schedule), an Automation login (when run from Automation), or a Joomla numeric user ID (when run from Shapiro 360). inp-seq Specifies the order that this should be printed. 1 is printed first, then 2, then 3, etc. inp-name The name of the input field. Put something that will look nice when the user sees it. Instead of \u201cstart-date\u201d, put \u201cStart Date\u201d. inp-value The value that the user set for this input field. inp-desc The description of the input field. Put something that will give the user instructions. For example, if inp-name is \u201cStart Date\u201d, inp-desc could be \u201cSet the starting date for this report.\u201d inp-type The datatype of this field. This is important for displaying the report properly in Shapiro 360.","title":"rpt-inp"},{"location":"report/#important-note","text":"The tables below this are only used for internal reports. \u201cInternal\u201d does not mean \u201cinternal to Shapiro\u201d. It means \u201cthe query is run internally inside of imp/report.p\u201d. If rpt-hdr.use-remote is yes, you can ignore the below tables.","title":"Important Note"},{"location":"report/#rpt-qry","text":"This defines the query for finding records to put on the report. Each rpt-qry record defines one phrase in the \u201cwhere\u201d clause. Each rpt-qry record is joined by \u201cand\u201d to create the full where clause. name Should match rpt-hdr.name. table-depth There can be multiple queries in a report. This specifies how many queries deep you are. For instance, say you want to find every bookeq for every shiphead. Shiphead will be table-depth 1. Bookeq will be table-depth 2. depth-seq Ignore this. It should always be 1. You can use it to set up \u201cor\u201d-like behavior if you super seriously need to. table-name The table to query. \u201cshiphead\u201d, \u201cbookeq\u201d, etc. field-name The field to compare against. \u201ccreate-date\u201d, \u201ccontainer-number\u201d, etc. operator The verb to use. \u201c=\u201d, \u201cbegins\u201d, etc. field-value The value to compare against. If field-type is \u201cdate\u201d, you can use an integer. For instance, if you set field-value to \u201c-5\u201d, then it will be calculated as \u201ctoday - 5\u201d. If local-var is yes, then set this to the name of a local variable. For example, \u201cbranch\u201d. field-type The datatype to compare against. This is important for doing date/numeric comparisons. local-var If this is yes, then you will compare against a local variable as defined in the rpt-var table.","title":"rpt-qry"},{"location":"report/#rpt-var","text":"When running multi-table queries, you\u2019ll need some way to link one table to another. For example, to find every bookeq for every shiphead, you\u2019ll need to compare branch, dept, and id. rpt-var stores those as local variables at runtime. name Should match rpt-hdr.name. table-depth The depth to pull this variable from. Should match rpt-qry.table-depth. depth-seq Should match rpt-qry.depth-seq. field-name The field to pull as a local variable. For example, if you\u2019re pulling from shiphead, this might be \u201cbranch\u201d.","title":"rpt-var"},{"location":"report/#rpt-det","text":"Each rpt-det record defines a column on the report. name Should match rpt-hdr.name. field-seq The order of this column on the report. table-name The name of the table to pull this field from. For example, \u201cshiphead\u201d. field-name The name of the field to pull this data from. For example, \u201cbranch\u201d. col-name The name of the column to display on the spreadsheet. data-type The Progress datatype. excel-type The Excel datatype. This is important for formatting columns. calc-prog If you need to calculate this field, leave field-name blank. Then, set calc-prog to a program name. It will be called like this: run value(rpt-det.calc-prog) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. hidden Use this if you want to hide the value of this column. This is used when you want to pull different rows onto different tabs.","title":"rpt-det"},{"location":"report/#rpt-tab","text":"If you want more than one tab on your report, create an rpt-tab record. name Should match rpt-hdr.name. col-name The name of the column to generate tabs from. This should match rpt-det.col-name. cell-value If cell-value is blank, you will create one tab for every unique value in a column. If you want to filter to one value, specify it here.","title":"rpt-tab"},{"location":"report/#central-program","text":"Rashi 6 imp/report.p","title":"Central Program"},{"location":"report/#parameters","text":"Input Report time This determines the output location of the report. If it\u2019s a time (such as \u201c8AM\u201d, \u201c10AM\u201d, or \u201c1stOfMonth\u201d), it will end up in a directory where schedtask will generate the .xls at a given time. If it\u2019s blank, it will put the report in a user-specific directory based on the user login input. An email will be sent to {user login}@shapiro.com with realtime master XLS instructions. If it\u2019s \u201cshapiro360\u201d, it will go to a special directory for Shapiro 360 report downloads. See the documentation on shapiro360/runRpt.p for more information. Report name If this is blank, it will run all reports matching a given time. For example, if \u201c8AM\u201d is your report time, and the report name is blank, it will run all reports scheduled for 8 AM. User login If the report is being run on a schedule, then this should be \u201cSYSTEM\u201d. If it\u2019s run for an internal user, this should be their Automation login. (Hopefully we can just append \u201c@shapiro.com\u201d to get their email address.) If it\u2019s run for Shapiro 360, this will be their user ID in the Joomla MySQL database. In this case, it will be an integer.","title":"Parameters"},{"location":"report/#body","text":"Kicks off the reports based on your input parameters: whether it should be a scheduled job or an individual report, and whether it goes internal or out to Shapiro 360. This sets the output directory and calls wrt-rpt. It also emails the Automation user if necessary.","title":"Body"},{"location":"report/#internal-procedures","text":"There are two kinds of reports: internal and remote. Internal reports run a database query through imp/report.p. This largely happens in get-depth. External reports run a database query in an external program. imp/report.p will call this program. External reports are easier. Internal and external wrt-rpt Writes an individual report. If you\u2019re doing a scheduled run for a certain time, you\u2019ll call wrt-rpt once for each report scheduled. Calls prep-output to set up your individual directories and sendmail scripts. If reports run inside of imp/report.p, you\u2019ll call: get-depth to traverse the rpt-qry and rpt-det tables (these tables define the database queries and assign statements which produce reports) finalize-tabs to split data into tabs if necessary If reports don\u2019t run inside of imp/report.p, you\u2019ll call remote-report to run the report. procedure get-full-dir This will generate one directory for each rpt-xls record. There will be one by default. Internal reports get-depth This one\u2019s a doozy. This builds a query using rpt-qry to find records for pulling data onto the report. One rpt-qry record represents one phrase in the query\u2019s \u201cwhere\u201d clause. rpt-det specifies which data you pull onto the report. One rpt-det record represents one column on the report. Some notes on external programs: If rpt-hdr.calc-prog is set, get-depth runs a filter function like so: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input table-name, input table-rowid, input \"filter\", input user-login, output continue ) no-error. Use this if you want to skip certain records, but can\u2019t do so through defining rpt-qry records. (For example, if you need logic involving \u201cor\u201d.) If continue is Y, then it will put this record on the report. Otherwise, it will skip this record. If rpt-det.calc-prog is blank, then it will pull the value out of the database directly. If rpt-det.calc-prog is set, it will run that program to determine the value to put in the cell. It calls rpt-det.calc-prog like so: run value(file-info:full-pathname) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. prep-output Prepare directories for CSV files to go in. Write rpt-list.txt so that the master XLS knows to run this report. Append to send-script.sh so that you mail the report out (if it\u2019s scheduled). procedure open-report Create directories to house .csv and .xls files. procedure finalize-tabs Write the header line in each .csv file you\u2019ve generated. procedure open-tab Not called. procedure output-line Outputs lines in every relevant directory. procedure print-line-by-tabs Outputs lines to every relevant .csv file. print-line-to-file Read the rpt-cell table and put data in a .csv file. External reports remote-report Calls a program to generate .csv files into a directory. Calls the program like so: run value(file-info:full-pathname) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error.","title":"Internal Procedures"},{"location":"report/#examples-of-calls","text":"imp/report.p ( input \u201c7:30AM\u201d, input \u201c\u201d, input \u201cSYSTEM\u201d ). In this case, we\u2019re running all of the morning reports. imp/report.p ( input \u201cshapiro360\u201d, input \u201cfb-draft\u201d, input \u201c648\u201d ). A user on 360 is running the Five Below All PO report. The Joomla user ID is 648. imp/report.p ( input \u201crealtime\u201d, input \u201cmr-fb-pom\u201d, input \u201cgregory\u201d ). Automation user \u201cgregory\u201d is running the M+R Five Below POM report. Because the time is \u201crealtime\u201d, the realtime XLS will be emailed to \u201cgregory@shapiro.com\u201d. (It will be S:\\CORP-DAILY\\realtime\\gregory\\realtime-master.xls.) imp/report.p ( input \u201c\u201d, input \u201cfb-onwat-fb\u201d, input \u201cSYSTEM\u201d ). Someone is testing the Five Below On the Water report. They must have typed this into the Progress Editor. This run will end up in CORP-DAILY/rpt/realtime.","title":"Examples of Calls"},{"location":"report/#automation","text":"These are programs in Automation for updating and running reports. I have tried to put advice in the \u201cHelp\u201d box on the right in this program. Or rather, I have put advice in that box, and I have tried to make it good advice.","title":"Automation"},{"location":"report/#report-modifier","text":"Before starting, you must enter a report name in \u201cReport:\u201d and hit Enter. If you don\u2019t know one, hit F6 to look one up. Or, if you want to create a new report, type the name for it and hit Enter. Please make it program-friendly (alphanumerics, underscores, and dashes only). Use the \u201cRun\u201d button to run the report. It\u2019ll email you a realtime master XLS.","title":"Report Modifier"},{"location":"report/#header","text":"","title":"Header"},{"location":"report/#header_1","text":"Program If Use Remote? is yes, then Program will be called like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input full-dir + \"/\", input login ) no-error. If Use Remote? is no, then Program will be used as a filter, like this: run value(rpt-hdr.calc-prog) ( input rpt-hdr.name, input table-name, input table-rowid, input \"filter\", input user-login, output continue ) no-error. Description A human-readable description for the program. Party The party for this program. You can leave it blank, set it to a customer code, or set it to a Shapiro department. Version A number representing the version of the program. Use remote? This determines the behavior of the Program field. If you set this to yes, then you can have most of the Progress programming coming out of your own program. Shapiro 360 Name If you want to display this in Shapiro 360, set this. The Party must match the customer code for a user. Shapiro 360 Users If you leave this blank, it\u2019ll display to all users matching the Party. If you set it, this report will only show to the users specified.","title":"Header"},{"location":"report/#input","text":"Field Name The name of the field. Make it nice to look at; do \u201cStart Date\u201d, not \u201cstart-date\u201d. Default Value The default value. This will be used if the report is run on a schedule. It will also auto-populate for a user before they have set their own preferred value. Data Type The datatype for this field. It\u2019s important to specify this so you can perform accurate numeric or date comparisons. Description You can use this to give instructions to the user if you need to.","title":"Input"},{"location":"report/#query","text":"You will only need this if \u201cUse Remote?\u201d is no.","title":"Query"},{"location":"report/#query_1","text":"Every record here defines a phrase in the \u201cwhere\u201d clause. Depth If you are querying tables within tables, this specifies which query you are talking about. For instance, say you are querying every bookeq for every shiphead. shiphead would be Depth 1. bookeq would be Depth 2. Table The table to query. Field The field to compare against. Operator The verb to use: \u201c=\u201d, \u201cbegins\u201d, etc. Value The value to compare against. If Data Type is \u201cdate\u201d, then you can put an integer here to perform comparisons relative to today. For example, if you enter \u201c-5\u201d, then the comparison will be against \u201ctoday - 5\u201d. Use Local Variable? Usually this is no. But, if you want to compare against the value of a local variable, select yes. If you select yes, then \u201cvalue\u201d must be the name of a local variable (\u201cbranch\u201d, \u201cdept\u201d, etc.). Note that you must define local variables below. Data Type The datatype of the field you\u2019re comparing against.","title":"Query"},{"location":"report/#local-variables","text":"Query Depth Which depth to pull this local variable from. If you\u2019re querying every bookeq for every shiphead: shiphead will be Depth 1. bookeq will be Depth 2. Field Name The field to pull into a local variable. In the shiphead/bookeq example: You\u2019ll want to pull \u201cbranch\u201d, \u201cdept\u201d, and \u201cid\u201d from Depth 1.","title":"Local Variables"},{"location":"report/#columns","text":"You will only need this if \u201cUse Remote?\u201d is no.","title":"Columns"},{"location":"report/#columns_1","text":"Move Up/Move Down Use these to change the order of columns on the report. The columns are printed in order from left to right. Table The table to pull this column from. Field The field name to pull this column from. Program If you need to calculate the value of this field, put in a program name. It will be called like this: run value(rpt-det.calc-prog) ( input rpt-hdr.name, input rpt-det.table-name, input dbc:get-curr-rowid(rpt-det.table-name), input rpt-det.col-name, input login, output rpt-cell.cell-value ) no-error. Column Header The title for the column to print in the spreadsheet. Hidden? Use this to hide a column. You\u2019ll want to do that if you are creating tabs. Progress Type The datatype of the variable in progress. Excel Type The format of the value in the Excel spreadsheet. This is important to set so that integers don\u2019t turn into scientific notation and so that dates don\u2019t get reformatted.","title":"Columns"},{"location":"report/#tabs","text":"Only bother with this if you want multiple tabs in your report. Column Header Set this to the Column Header from the above form. There will be one tab for each unique value in this column. For example, if you set it on the \u201cPort of Entry\u201d column, then you might have tabs like: \u201cLOS ANGELES, CA\u201d \u201cMEMPHIS, TN\u201d \u201cBALTIMORE, MD\u201d","title":"Tabs"},{"location":"report/#mail","text":"To Email The email to receive this report. From Email The email to send this report. Email Subject The subject line for the email. Email Body The body text for the email. If you leave it blank, we\u2019ll send a generic message. Send if Blank? If there\u2019s no report to send, then you can prevent us from sending anything. Set this to \u201cyes\u201d if you want the mailer to run even if we don\u2019t have a report. Run time The time of day to run. Run day The day of week to run. Run month The month to run. Leave blank if it should run every month. Column Name Use this to filter reports. Probably leave it blank. Cell Value Use this to filter reports. Probably leave it blank.","title":"Mail"},{"location":"report/#report-runner","text":"Search Type in a report name, party, or description. OK Hit this to select a report from the table. You need to hit \u201cOK\u201d before you can run it. Input This table displays user input fields. The program will set up defaults for you. You can change them using the \u201cInput Value\u201d text input. Input Value Click \u201cUpdate\u201d to change an input value. Click \u201cSave\u201d to save your new input value. Run This kicks off a report. Once it\u2019s done, you will receive an email with the report. Cancel You will need to wait while a report runs. If you cannot wait, you can click \u201cCancel\u201d. If you click \u201cCancel\u201d, your report will not finish. Return Use this to exit the Report Runner.","title":"Report Runner"},{"location":"report/#master-xls","text":"There are two different master XLSes. One is run during a scheduled run, and another is sent to users for running in real time. Folder structure: S:\\CORP-DAILY\\rpt{time that the report runs}{report name}{spreadsheet group}{CSV files} For example: S:\\CORP-DAILY\\rpt\\10am\\fb-draft\\rpt\\allpo.csv Each spreadsheet group will have one spreadsheet. Every file in the {CSV files} folder will be put as one tab on the same spreadsheet.","title":"Master XLS"},{"location":"report/#scheduled","text":"S:\\CORP-DAILY\\rpt\\master.xls auto_open() Get a list of report names to run out of rpt-list.txt. This goes in a variable called ReportNames. Each report name defines a directory to look in. For each directory, examine all sub-directories. This goes in SubFolder. For each subfolder, examine all CSV files. This goes in CSVNames. Run format_cells() for each entry in CSVNames. Each CSV file is a tab on the report. For each subfolder, save an XLS. Move all CSV files into the archive directory. Delete rpt-list.txt. Quit out of the Excel macro. format_cells() If this is a special tab (marked as \u201cPIE CHART\u201d or \u201cBAR GRAPH\u201d), pass it off to pie_chart() or bar_graph() as is appropriate. If you\u2019re not a special tab, run normally. Set the borders. Examine the header cell of each column. Apply formatting (bold text, gray background). Format the column if any formatting is specified. \u201c (DATE)\u201d \u2013 format as a date \u201c (INTEGER)\u201d \u2013 format as an integer \u201c{header};NumberFormat;{format}\u201d \u2013 format the column with whatever is in {format} Example: \u201cItem Price;NumberFormat;0.0000\u201d will apply number format \u201c0.0000\u201d to the column. The header will only say \u201cItem Price\u201d afterwards. For each cell, replace the text \u201c(NEWLINE)\u201d with an actual newline. Autofit and autofilter all cells. pie_chart() First row format: PIE CHART,{name},{number of rows} \u201cPIE CHART\u201d must be there to tell the macro that it\u2019s a pie chart. {name} is the name of your pie chart. {number of rows} is the number of rows of data you\u2019re sending. Then each subsequent row must have this format: {name},{value} {name} is the name of the pie chart slice. {value} is the value associated with the pie chart slice. bar_graph() First row format: BAR GRAPH,{name},{number of rows},{special},\u201dDATA LABELS\u201d \u201cBAR GRAPH\u201d must be there to tell the macro that it\u2019s a bar graph. {name} is the name of your bar graph. {number of rows} is the number of rows of data that you\u2019re sending. {special} is optional. It lets you format the bar graph. \u201cDOUBLE BAR\u201d \u2013 show columns clustered side by side \u201c100% STACK\u201d \u2013 show columns stacked on top one another to reach 100% If you want data labels, you must put \u201cDATA LABELS\u201d in the fifth spot. This is optional. The second row must have this format: ,{name 1},{name 2} The first spot must be blank. {name 1} is the label of each bar. For example: if the bars are labelled \u201cBrazil\u201d and \u201cTurkey\u201d, then {name 1} should be \u201cCountry\u201d. {name 2} is the value for each bar. For example: if the bars show the percentage of compliance, then {name 2} should be \u201c% compliant\u201d. Then each subsequent row must have this format: {label},{value} {label} is the name of a data point. {value} is the value for a data point. Col_Letter() Find the letter corresponding to a column. HexToLongRGB() Convert a hexadecimal color code to RGB.","title":"Scheduled"},{"location":"report/#realtime","text":"S:\\CORP-DAILY\\rpt\\realtime-master.xls This is the same as the scheduled XLS, except it keeps the report open so the user can read it.","title":"Realtime"},{"location":"report/#shapiro-360","text":"","title":"Shapiro 360"},{"location":"report/#report-getter","text":"shapiro360/getRpt.p This program checks if you\u2019re allowed to access a report. It also passes back any input fields for the report as defined in rpt-inp. This is so that custom-report.php can display input fields for the user to fill out. For instance, say your report has a start date and an end date; this will pass back two input fields, one for each date.","title":"Report Getter"},{"location":"report/#parameters_1","text":"Input web-login.user-login rpt-hdr.name Output Error message Human-readable report name A temp table of user input fields","title":"Parameters"},{"location":"report/#php-script","text":"custom-report.php","title":"PHP Script"},{"location":"report/#initialization","text":"A report name is passed in through $_GET[\u2018rpt\u2019]. This report name is passed into the report getter in order to draw the page. The report getter gives you the title to display on the page. It also gives you the input fields to display. For each row in ttInput, it draws an input field. If it\u2019s an integer, the page draws a number input; if it\u2019s a date, the page draws a date picker; otherwise, the page draws a regular text input.","title":"Initialization"},{"location":"report/#input-parameters","text":"This report reads the \u201crpt\u201d GET variable. This corresponds to a value in rpt-hdr.name.","title":"Input Parameters"},{"location":"report/#functions","text":"JavaScript window.addEventListener(\u2018load\u2019) Set the page name. If you have any date inputs, initialize the date picker. run_rpt() Pack up the input fields and call the report runner. This kicks off ping_file(). ping_file() Check to see if your report has finished running. If it\u2019s done, download it. If it\u2019s not done, check again in 1 second. This uses setInterval(). The report will be at https://shapiro360.shapiro.com/vdocs/reports/{user_id} {report name} {timestamp}.xlsx. However, ping_file() checks for a .txt file. This file is created once the .xlsx is completely written. This prevents the user from downloading a half-written spreadsheet. For big reports (Five Below All PO Report), this can run for like five minutes.","title":"Functions"},{"location":"report/#report-runner_1","text":"shapiro360/runRpt.p Take the user\u2019s input and create rpt-inp records. Then, run the report through imp/report.p. Once that is done, call the Master PY.","title":"Report Runner"},{"location":"report/#parameters_2","text":"Input web-login.user-login Joomla user ID rpt-hdr.name timestamp input temp-table Output Error message Location of the report This isn\u2019t used by the PHP script, since the web service will time out on larger reports. That\u2019s okay, because the Progress program will continue running, even though it will never return to the PHP script.","title":"Parameters"},{"location":"report/#internal-procedures_1","text":"crt-inp This creates rpt-inp records based on data the user passed in. This scheme allows you to save the user\u2019s input to the database so that it can be read from any program.","title":"Internal Procedures"},{"location":"report/#master-py","text":"shapiro360/openpyxl-2.5.4/report.py This uses the Python library openpyxl.","title":"Master PY"},{"location":"report/#input-parameters_1","text":"Input folder \u2013 folder to read CSVs from Output \u2013 the filename to save an XLSX into, minus the file extension","title":"Input Parameters"},{"location":"report/#body_1","text":"Read every CSV file out of the input folder one by one. Run normal_sheet(), pie_chart(), or bar_graph() as is appropriate. Save the output XLSX. Once that\u2019s done, save a TXT file to communicate that the XLSX is fully written.","title":"Body"},{"location":"report/#functions_1","text":"as_text() Return the value of a cell as a string. normal_sheet() Process a CSV file as a normal sheet. This mirrors format_cells() from the Master XLS. pie_chart() Process a CSV as a pie chart. This mirrors pie_chart() from the Master XLS. bar_graph() Process a CSV as a bar graph. This mirrors bar_graph() from the Master XLS.","title":"Functions"},{"location":"report/#scheduled-runs","text":"","title":"Scheduled Runs"},{"location":"report/#rashi-6-generate-csv-files","text":"The demon1 crontab runs /usr/bin/run_report_sched.sh runs on the 15th and 45th minute of each hour. That calls /usr/bin/mxp_report.pf. That calls imp/report-sched.p. imp/report-sched.p figures the time and passes it into imp/report.p. For instance, if the time is between 7:10 AM and 7:39 AM, imp/report-sched.p will pass \"8AM\" to imp/report.p.","title":"Rashi 6: Generate .csv Files"},{"location":"report/#schedtask-generate-xls-files","text":"The Task Scheduler calls C:\\bat\\report.bat on the 15th and 45th minute of each hour. It will determine what time to run. For instance, if the time is between 7:40 AM and 8:09 AM, it will get the time \"8AM\". It will look for a directory according to this time. This will be in the format: \\myshapiro\\dfs\\corp-daily\\rpt{TIME} If the directory exists, and it has a master XLS and rpt-list.txt, then report.bat will run the master XLS.","title":"schedtask: Generate .xls Files"},{"location":"report/#rashi-6-mail-xls-files","text":"The demon1 crontab runs /usr/bin/mail_report_sched.sh on the 0th and 30th minute of each hour. It will look for a mail script according to the time. The mail script will be in this location: /usr5/dailyreports/rpt/{TIME}/send-script.sh If the mail script is there, mail_report_sched.sh will run it.","title":"Rashi 6: Mail .xls Files"},{"location":"setup/","text":"Local Setup Download Git . Install Python (be sure to \"Add Python 3.7 to PATH\"). It should include pip by default. Go into your favorite directory. Right-click in whitespace and click \"Git Bash Here\". A command prompt will come up. Run the following: pip install mkdocs (this will install mkdocs, which you need to compile the documentation into HTML pages) git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-cms/templates/rt_metamorph/shapirodocumentaion cd shapirodocumentaion git checkout master Now make your changes. Once you are done, commit your raw changes to the master branch: git pull (make sure you have the latest version of the repository) git status (make sure your files show up as edited) git add {filename} (stage your files for a commit) git commit (be sure to add a commit message on the next screen, or else your commit will not take) git push (this pushes your raw changes to the master branch) mkdocs gh-deploy (this compiles the documentation site and syncs it to 360) Please remember to do both: push to the master branch and deploy the new site. These are two distinct branches, and updating one will not update the other.","title":"Local Setup"},{"location":"setup/#local-setup","text":"Download Git . Install Python (be sure to \"Add Python 3.7 to PATH\"). It should include pip by default. Go into your favorite directory. Right-click in whitespace and click \"Git Bash Here\". A command prompt will come up. Run the following: pip install mkdocs (this will install mkdocs, which you need to compile the documentation into HTML pages) git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-cms/templates/rt_metamorph/shapirodocumentaion cd shapirodocumentaion git checkout master Now make your changes. Once you are done, commit your raw changes to the master branch: git pull (make sure you have the latest version of the repository) git status (make sure your files show up as edited) git add {filename} (stage your files for a commit) git commit (be sure to add a commit message on the next screen, or else your commit will not take) git push (this pushes your raw changes to the master branch) mkdocs gh-deploy (this compiles the documentation site and syncs it to 360) Please remember to do both: push to the master branch and deploy the new site. These are two distinct branches, and updating one will not update the other.","title":"Local Setup"},{"location":"Hub360/about/","text":"Document Hub 360 - Overview Built w/ React, the Shapiro Document Portal, aka Hub360, is a one page app that allows the user to easily download, rename, and upload documents to/from the: shapiro360-docs-index, glg-docs-index, customer-docs-index ( General ) customer-docs-index ( FPPI Authorization ) - Developer Documenation Local Setup If you don't have Git, download it here git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-apps/hub360repo You'll need to install the package.json to get the Node_Modules cd hub360repo npm install Spin up a local server - Terminal will run a compile everytime you save a file and alert you to errors. Keep in mind, at the time of writing, all WSDL related calls will fail. npm start When ready to create a production build; npm run build - User Guide Shapiro360/ScannedDocs Document Names must follow the following convention: FILEID + NAME OF FILE + EXTENSION ex. 2102748ImportantFile.pdf, 2102748 Important-File.pdf GLG/TransDocs Document Names must follow the following convention: FILEID + NAME OF FILE + EXTENSION ex. 2102748.tdocs.pdf, 2102748 - TransDocument.pdf Customer Docs Document Names should follow the following convention: CUSTNO + NAME OF FILE + EXTENSION ex. FIVEBMER POA.pdf, AirwayBill.pdf* FPPI Docs Document Names should follow the following convention: CUSTNO + \"-FPPI-\" + NAME OF FILE + EXTENSION ex. AMTRANS-FPPI-GTS.pdf, GTS AMTRANS FPPI AUTHORIZATION.pdf** *Works, but we should always push for users to include an identifier in the name, in this case, the custno **Works, but we should maintain consistency in the event we need to gather these files programmatically by name.","title":"Document Hub 360"},{"location":"Hub360/about/#document-hub-360","text":"","title":"Document Hub 360"},{"location":"Hub360/about/#-overview","text":"Built w/ React, the Shapiro Document Portal, aka Hub360, is a one page app that allows the user to easily download, rename, and upload documents to/from the: shapiro360-docs-index, glg-docs-index, customer-docs-index ( General ) customer-docs-index ( FPPI Authorization )","title":"- Overview"},{"location":"Hub360/about/#-developer-documenation","text":"","title":"- Developer Documenation"},{"location":"Hub360/about/#local-setup","text":"","title":"Local Setup"},{"location":"Hub360/about/#if-you-dont-have-git-download-it-here","text":"git clone //shap-exp-360pro/c$/inetpub/wwwroot/shapiro-apps/hub360repo","title":"If you don't have Git, download it here"},{"location":"Hub360/about/#youll-need-to-install-the-packagejson-to-get-the-node_modules","text":"cd hub360repo npm install","title":"You'll need to install the package.json to get the Node_Modules"},{"location":"Hub360/about/#spin-up-a-local-server-terminal-will-run-a-compile-everytime-you-save-a-file-and-alert-you-to-errors-keep-in-mind-at-the-time-of-writing-all-wsdl-related-calls-will-fail","text":"npm start","title":"Spin up a local server - Terminal will run a compile everytime you save a file and alert you to errors. Keep in mind, at the time of writing, all WSDL related calls will fail."},{"location":"Hub360/about/#when-ready-to-create-a-production-build","text":"npm run build","title":"When ready to create a production build;"},{"location":"Hub360/about/#-user-guide","text":"","title":"- User Guide"},{"location":"Hub360/about/#shapiro360scanneddocs","text":"Document Names must follow the following convention: FILEID + NAME OF FILE + EXTENSION ex. 2102748ImportantFile.pdf, 2102748 Important-File.pdf","title":"Shapiro360/ScannedDocs"},{"location":"Hub360/about/#glgtransdocs","text":"Document Names must follow the following convention: FILEID + NAME OF FILE + EXTENSION ex. 2102748.tdocs.pdf, 2102748 - TransDocument.pdf","title":"GLG/TransDocs"},{"location":"Hub360/about/#customer-docs","text":"Document Names should follow the following convention: CUSTNO + NAME OF FILE + EXTENSION ex. FIVEBMER POA.pdf, AirwayBill.pdf*","title":"Customer Docs"},{"location":"Hub360/about/#fppi-docs","text":"Document Names should follow the following convention: CUSTNO + \"-FPPI-\" + NAME OF FILE + EXTENSION ex. AMTRANS-FPPI-GTS.pdf, GTS AMTRANS FPPI AUTHORIZATION.pdf** *Works, but we should always push for users to include an identifier in the name, in this case, the custno **Works, but we should maintain consistency in the event we need to gather these files programmatically by name.","title":"FPPI Docs"},{"location":"Ocean Insights/about/","text":"Ocean Insights Test","title":"About"}]}